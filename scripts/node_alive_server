#!/usr/bin/env python

import re

import roslib
import rospy
import rosnode
import time
import diagnostic_msgs.msg
from std_msgs.msg import String
import subprocess as sub
import sys
import os

re_ping_node = re.compile('pinging ([^ ]+) with a timeout of \d+.\d+s\s*xmlrpc reply from')
NULL = NULL = open(os.devnull, 'w')

roslib.load_manifest('node_alive')

try:
	neglect_nodes = rospy.get_param('node_alive/neglect_nodes')
except:
	neglect_nodes = []

nodes = []
seen_nodes = []

def callback(data):
	if data.data not in nodes and data.data not in neglect_nodes:
		rospy.loginfo("Added '%s' to node_alive_server"%data.data)
		nodes.append(data.data)

# Main function.
if __name__ == '__main__':
	rospy.init_node('node_alive_server')

	rospy.Subscriber("check_alive_nodes", String, callback)
	pub = rospy.Publisher('diagnostics', diagnostic_msgs.msg.DiagnosticArray)

	seq = 1

	while not rospy.is_shutdown():
		diagnosticArray = diagnostic_msgs.msg.DiagnosticArray()
		diagnosticArray.header.stamp = rospy.get_rostime()
		diagnosticArray.header.seq = seq

		listed_nodes = rosnode.get_node_names()
		for listed_node in listed_nodes:
			if listed_node not in nodes and listed_node not in neglect_nodes:
				rospy.loginfo("Added '%s' to node_alive_server"%listed_node)
				nodes.append(listed_node)
			if listed_node not in seen_nodes:
				seen_nodes.append(listed_node)
		
		alive_nodes = []

		response = sub.Popen(['rosnode','ping','-a'],stderr=NULL,stdout=sub.PIPE)
		ping_nodes = re_ping_node.findall(response.stdout.read())

		for alive_node in ping_nodes:
			alive_nodes.append(alive_node)
		
		for node in nodes:

			# Create diagnostic mesasge
			statusMsg = diagnostic_msgs.msg.DiagnosticStatus() 
			statusMsg.name = "node_alive%s"%node

			# Determine node status
			if node in alive_nodes:
				statusMsg.level = 0 # 1. Node is alive --> Status OK
				statusMsg.message = "is alive"
			else:
				if node not in listed_nodes:
					if node in seen_nodes:
						nodes.remove(node) # 2. Node has been cleanly removed 
						rospy.loginfo("Removed '%s' from node_alive_server"%node)
						continue
					else:
						statusMsg.level = 2 # 3. Node did not start at all --> Status ERROR
						statusMsg.message = "did not start"
				else:
					statusMsg.level = 2 # 4. Node crashed --> Status ERROR
					statusMsg.message = "is dead"

			diagnosticArray.status.append(statusMsg)

		# Publish diagnostic array
		pub.publish(diagnosticArray)

		rospy.sleep(5)

		seq+=1
